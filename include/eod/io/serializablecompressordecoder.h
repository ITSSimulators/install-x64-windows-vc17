/*
    Copyright (C) 2008 Seeing Machines Ltd. All rights reserved.

    This file is part of the CoreData API.

    This file may be distributed under the terms of the SM Non-Commercial License
    Agreement appearing in the file LICENSE.TXT included in the packaging
    of this file.

    This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
    WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

    Further information about the CoreData API is available at:
    http://www.seeingmachines.com/

*/
#ifndef SM_COREDATA_EOD_SERIALIZABLECOMPRESSORDECODER_H
#define SM_COREDATA_EOD_SERIALIZABLECOMPRESSORDECODER_H

//! \file
#include "eod/serializable.h"
#include "eod/io/serializablecompressorcodec.h"

namespace sm
{
    namespace eod
    {
        namespace io
        { 
            /*! \brief Decoded data from a SerializableCompressorDecoder

            */
            struct DecoderData
            {
                //! The decoded object.
                SerializablePtr _object;

                //! The presentation time stamp.
                PTS _pts;

                DecoderData()
                : _object()
                , _pts(0) 
                {
                }

                DecoderData(SerializablePtr object, PTS pts) 
                : _object(object)
                , _pts(pts) 
                {
                }
            };

            /*! \brief Interface for a decoder.

                A decoder decodes the binary stream of data generated by
                a SerializableCompressorEncoder.
            */
            class SM_COREDATA_API SerializableCompressorDecoder
            {
            public:
                /*!
                    \todo Remove this typedef.
                */
                typedef sm::eod::io::DecoderData DecoderData;

                virtual ~SerializableCompressorDecoder();

                //! @return An ID indicating the binary format of the encoded data.
                virtual CodecID codecID() const COREDATA_PURE_METHOD;

                /*! \brief Decodes a block of data

                    \param data Pointer to block of encoded data.
                    \param size The number of bytes available at \a data
                */
                virtual void decode(const uint8* data, std::size_t size) COREDATA_PURE_METHOD COREDATA_NO_THROW;

                /*! \brief Returns the next decoded object.
                */
                virtual DecoderData getNextWithStatus(DeserializationStatusFlags& status_in_out) COREDATA_PURE_METHOD COREDATA_NO_THROW;

                DecoderData getNext() COREDATA_NO_THROW;


            protected:
                SerializableCompressorDecoder()
                {
                }

            private:
                // Ban copy construction
                SerializableCompressorDecoder(const SerializableCompressorDecoder&);
                // Ban assignement
                SerializableCompressorDecoder& operator=(const SerializableCompressorDecoder&);
            };

            typedef boost::shared_ptr<SerializableCompressorDecoder> SerializableCompressorDecoderPtr;
        }
    }
}

#endif //SM_COREDATA_EOD_SERIALIZABLECOMPRESSORDECODER_H

